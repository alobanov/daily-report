import subprocess
from datetime import datetime, timedelta
from collections import defaultdict
import argparse
import sys
import os
import openai
from dotenv import load_dotenv

load_dotenv()

def get_git_username(repo_path=None):
    try:
        cmd = ["git", "config", "user.name"]
        if repo_path:
            cmd = ["git", "-C", repo_path, "config", "user.name"]
        return subprocess.check_output(cmd).decode().strip()
    except subprocess.CalledProcessError:
        print("‚ùå Git user.name –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git config user.name '–í–∞—à–µ –∏–º—è'")
        exit(1)

def get_commit_details(commit_hash, repo_path=None):
    try:
        cmd = ["git", "show", "-s", "--pretty=format:‚Ä¢ %h %ad %s", "--date=short", commit_hash]
        if repo_path:
            cmd = ["git", "-C", repo_path, "show", "-s", "--pretty=format:‚Ä¢ %h %ad %s", "--date=short", commit_hash]
        output = subprocess.check_output(cmd).decode()
        return output
    except subprocess.CalledProcessError:
        return None

def get_commits_by_author(since, until, author, repo_path=None, email=None):
    try:
        cmd = ["git", "log", "--all", f"--since={since}", f"--until={until}", f"--author={author}", "--pretty=format:%H"]
        if repo_path:
            cmd = ["git", "-C", repo_path, "log", "--all", f"--since={since}", f"--until={until}", f"--author={author}", "--pretty=format:%H"]
        if email:
            cmd = ["git", "log", "--all", f"--since={since}", f"--until={until}", f"--author={email}", "--pretty=format:%H"]
            if repo_path:
                cmd = ["git", "-C", repo_path, "log", "--all", f"--since={since}", f"--until={until}", f"--author={email}", "--pretty=format:%H"]
        output = subprocess.check_output(cmd).decode()
        return list(sorted(set(filter(None, output.strip().split("\n")))))
    except subprocess.CalledProcessError:
        return []

def get_commit_branches(commit_hash, repo_path=None):
    try:
        cmd = ["git", "branch", "--contains", commit_hash]
        if repo_path:
            cmd = ["git", "-C", repo_path, "branch", "--contains", commit_hash]
        branches = subprocess.check_output(cmd).decode().strip().split("\n")
        return [b.strip().lstrip("* ") for b in branches if b.strip()]
    except subprocess.CalledProcessError:
        return []

def main():
    parser = argparse.ArgumentParser(description="–ü–æ–∫–∞–∑–∞—Ç—å git-–∫–æ–º–º–∏—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞ –≤—á–µ—Ä–∞).")
    parser.add_argument(
        "--date",
        type=str,
        help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-14). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—á–µ—Ä–∞."
    )
    parser.add_argument(
        "--repo",
        type=str,
        help="–ü—É—Ç—å –∫ git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è."
    )
    parser.add_argument(
        "--email",
        type=str,
        help="Email –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–æ–º–º–∏—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    parser.add_argument(
        "--use-gpt",
        action="store_true",
        help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ ChatGPT API –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    )
    args = parser.parse_args([arg for arg in sys.argv[1:] if not arg.startswith("-f")])  # –∏–≥–Ω–æ—Ä–∏–º Jupyter-–∞—Ä–≥—É–º–µ–Ω—Ç—ã

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
    if args.date:
        try:
            target_date = datetime.strptime(args.date, "%Y-%m-%d")
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
            return
    else:
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        target_date = today - timedelta(days=1)

    since = target_date.isoformat()
    until = (target_date + timedelta(days=1)).isoformat()

    repo_path = args.repo
    author = get_git_username(repo_path)
    commit_hashes = get_commits_by_author(since, until, author, repo_path, args.email)

    if not commit_hashes:
        print(f"–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{author}' –∑–∞ {target_date.date()}.")
        return
    else:
        prompt = f"""
üîß –°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–í—á–µ—Ä–∞:
- <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ 1>
- <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ 2>

üìå –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π –∫–æ–º–º–∏—Ç—ã –ø–æ –≤–µ—Ç–∫–∞–º. –ö–∞–∂–¥–∞—è –≤–µ—Ç–∫–∞ ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞.
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –≤ –∫–∞–∂–¥–æ–π –≤–µ—Ç–∫–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π.
‚Ä¢ –ï—Å–ª–∏ –≤ –≤–µ—Ç–∫–µ develop –µ—Å—Ç—å –∫–æ–º–º–∏—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º MOB-, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–º–µ—Ä–∂–µ–Ω–∞ ‚Äî —É–ø–æ–º—è–Ω–∏ —ç—Ç–æ –≤ –æ—Ç—á—ë—Ç–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.

üì• –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫ –∏ –∫–æ–º–º–∏—Ç–æ–≤ ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç.
        """
        if args.use_gpt:
            print("\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–º–ø—Ç –≤ ChatGPT API:\n")
            print(prompt)
            print("\nüì• –û—Ç–≤–µ—Ç –æ—Ç ChatGPT API:\n")
            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            response = client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[{"role": "user", "content": prompt}]
            )
            print(response.choices[0].message.content)
        else:
            print(prompt)

    # –ü–æ–ª—É—á–∞–µ–º develop-–∫–æ–º–º–∏—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    develop_commits = set()
    try:
        cmd = ["git", "log", "develop", f"--since={since}", f"--until={until}", f"--author={author}", "--pretty=format:%H"]
        if repo_path:
            cmd = ["git", "-C", repo_path, "log", "develop", f"--since={since}", f"--until={until}", f"--author={author}", "--pretty=format:%H"]
        if args.email:
            cmd = ["git", "log", "develop", f"--since={since}", f"--until={until}", f"--author={args.email}", "--pretty=format:%H"]
            if repo_path:
                cmd = ["git", "-C", repo_path, "log", "develop", f"--since={since}", f"--until={until}", f"--author={args.email}", "--pretty=format:%H"]
        output = subprocess.check_output(cmd).decode()
        develop_commits = set(filter(None, output.strip().split("\n")))
    except subprocess.CalledProcessError:
        pass

    print(f"\nüì¶ –ö–æ–º–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{author}' –∑–∞ {target_date.date()}:\n")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º develop
    if develop_commits:
        print("üîÄ –í–µ—Ç–∫–∞: develop")
        for commit in develop_commits:
            details = get_commit_details(commit, repo_path)
            if details:
                print(details)
        print()

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ develop
    branch_commits = defaultdict(list)
    for commit in commit_hashes:
        if commit in develop_commits:
            continue
        branches = get_commit_branches(commit, repo_path)
        for branch in branches:
            if branch != "develop":
                branch_commits[branch].append(commit)
                break

    for branch, commits in branch_commits.items():
        if commits:
            print(f"üîÄ –í–µ—Ç–∫–∞: {branch}")
            for commit in commits:
                details = get_commit_details(commit, repo_path)
                if details:
                    print(details)
            print()

if __name__ == "__main__":
    main() 